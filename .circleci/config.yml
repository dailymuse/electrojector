defaults: &defaults
  working_directory: ~/electrojector
  environment:
    - TOOLS_IMAGE=themuse/tools:${TOOLS_VERSION:-2.5.8}
  machine:
    enabled: true
    image: circleci/classic:201711-01
    docker_layer_caching: true

login_to_ecr: &login_to_ecr
  name: Login to ECR
  command: |
    docker run \
      --rm \
      -e AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY \
      -e AWS_DEFAULT_REGION \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -v $HOME/.docker:/root/.docker \
      "themuse/tools:${TOOLS_VERSION:-2.5.8}" \
      ecr-login
    sudo chown -R circleci:circleci $HOME/.docker

build: &build
  name: Build
  command: docker build --build-arg GEMFURY_TOKEN --build-arg NODE_ENV=${NODE_ENV:-development} -t electrojector .

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: *login_to_ecr
      - run: *build

  test:
    <<: *defaults
    steps:
      - checkout
      - run: *login_to_ecr
      - run: *build
      - run:
          name: Execute Tests & coverage
          command: |
            docker run --rm electrojector yarn run test

  publish:
    <<: *defaults
    steps:
      - checkout
      - run:
            name: Publish
            command: |
              package_name=$(cat package.json | jq .name -r)
              package_version=$(cat package.json | jq .version -r)
              dist_tag=$(docker run --rm "themuse/tools:${TOOLS_VERSION:-2.5.8}" generate-deployment-id $CIRCLE_BRANCH)
              docker run \
                --rm \
                --user root \
                -v $(pwd):/app/workspace \
                -w /app/workspace \
                --env NPM_AUTH_TOKEN \
                --env GEMFURY_TOKEN=$GEMFURY_PUSH_TOKEN \
                circleci/node:10 \
                ./ci/publish $package_name $package_version $dist_tag $CIRCLE_BUILD_NUM $CIRCLE_BRANCH
              echo "To install via dist-tag: npm install --save $PACKAGE_NAME@$DIST_TAG"

workflows:
  version: 2
  primary:
    jobs:
      - build
      - test
      - publish:
          requires:
            - build
            - test